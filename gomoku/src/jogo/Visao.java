/*
 * Visao.java
 *
 * criada on 5 de Abril de 2007, 13:56
 */
package jogo;

import java.awt.Color;
import java.awt.GridLayout;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import tabuleiro.Jogada;

/**
 *
 * @author Alcione de Paiva
 */
public class Visao extends javax.swing.JFrame implements JogoObservador {

    private final int DIM = Configuracao.getInstance().getDim();
    private javax.swing.JButton bts[][];
    Timer t = null;
    private javax.swing.ImageIcon[] icones = null;
    private Servidor servidor = null;
    byte tabAnt[][] = null;

    public Visao() {
        bts = new javax.swing.JButton[DIM][DIM];
        initComponents();
        this.setTitle(Configuracao.getInstance().getNome());
        t = new Timer();
        t.start();
        String[] pecas = Configuracao.getInstance().getPecas();
        icones = new ImageIcon[pecas.length];
        for (int i = 0; i < pecas.length; i++) {
            icones[i] = new javax.swing.ImageIcon(pecas[i]);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelBts = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabelMensagem = new javax.swing.JLabel();
        jLabelStatus = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemReinicia = new javax.swing.JMenuItem();
        jMenuItemSair = new javax.swing.JMenuItem();
        jMenuTempo = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanelBts.setBackground(new java.awt.Color(255, 255, 204));
        jPanelBts.setLayout(new java.awt.GridLayout(1, 0));

        jPanel2.setBackground(new java.awt.Color(153, 255, 153));
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabelMensagem.setForeground(new java.awt.Color(255, 0, 51));
        jLabelMensagem.setBorder(javax.swing.BorderFactory.createTitledBorder("Mensagens"));

        jLabelStatus.setBorder(javax.swing.BorderFactory.createTitledBorder("Status"));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelStatus, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 630, Short.MAX_VALUE)
                    .addComponent(jLabelMensagem, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 630, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelMensagem, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(jLabelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu1.setText("Menu");

        jMenuItemReinicia.setText("Reinicia");
        jMenuItemReinicia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemReiniciaActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemReinicia);

        jMenuItemSair.setText("Sair");
        jMenuItemSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSairActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemSair);

        jMenuBar1.add(jMenu1);

        jMenuTempo.setText("00:00");
        jMenuBar1.add(jMenuTempo);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelBts, javax.swing.GroupLayout.DEFAULT_SIZE, 658, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanelBts, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanelBts.setLayout(new GridLayout(DIM,DIM));

        for (int  i = 0;  i < DIM;  i++ )
        for (int  j = 0;  j < DIM;  j++ ) {
            bts[i][j] = new javax.swing.JButton();
            bts[i][j].setActionCommand("button");
            bts[i][j].setBackground(Color.lightGray);
            bts[i][j].setSize(70,70);
            jPanelBts.add(bts[i][j]);
            //iaBts[i][j].addMouseListener(aSymMouse);
        }

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemReiniciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemReiniciaActionPerformed
        if (servidor != null) {
            tabAnt = null;
            servidor.reinicia();
        } else {
            this.setMensagem("Modelo Nulo!");
        }
    }//GEN-LAST:event_jMenuItemReiniciaActionPerformed

    private void jMenuItemSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSairActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItemSairActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * java.awt.EventQueue.invokeLater(new Runnable() {
         *
         * public void run() { Visao v = new Visao(); v.setVisible(true);
         * byte[][] tab = {{0, 0, 0, 0, 0, 0, 0, 0}, {1, 1, 1, 0, 0, 0, 0, 0},
         * {0, 0, 0, 0, -1, -1, -1, -1}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0,
         * 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0,
         * 0, 0, 0, 0, 0, 0, 0}};
         *
         * v.desenhaTabuleiro(tab); try { Thread.currentThread().sleep(1000); }
         * catch (InterruptedException ex) {
         * Logger.getLogger(Visao.class.getName()).log(Level.SEVERE, null, ex);
         * } tab[0][0] = -1; tab[0][1] = -1; tab[1][0] = -1; //
         * v.desenhaTabuleiro(tab); } });
         */
        Visao v = new Visao();
        v.setVisible(true);
        byte[][] tab = {{0, 0, 0, 0, 0, 0, 0, 0}, {1, 1, 1, 0, 0, 0, 0, 0}, {0, 0, 0, 0, -1, -1, -1, -1},
            {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0}};

        v.desenhaTabuleiro(tab);
        try {
            Thread.currentThread().sleep(1000);
        } catch (InterruptedException ex) {
            Logger.getLogger(Visao.class.getName()).log(Level.SEVERE, null, ex);
        }
        tab[0][0] = -1;
        tab[0][1] = -1;
        tab[1][0] = -1;
        v.desenhaTabuleiro(tab);

    }

    @Override
    public void setVisible(boolean b) {
        super.setVisible(b);
        setSize(800, 600);
        pack();
    }

    /**
     * exibe uma mensagem na tela
     *
     * @param men mensagem a ser exibida
     */
    public void setMensagem(String men) {
        jLabelMensagem.setText(men);
    }

    public void setFundo(int lin, int col) {
        bts[lin][col].setBackground(Color.BLACK);
    }

    /**
     * exibe uma mensagem na linha de status
     *
     * @param men mensagem a ser exibida
     */
    public void setStatus(String men) {
        jLabelStatus.setText(men);
    }

    public void setServidor(Servidor s) {
        this.servidor = s;
        s.addObservador(this);
    }

    private static void espera() {
        try {
            Thread.currentThread().sleep(Configuracao.getInstance().getEspera());
        } catch (InterruptedException ex) {
        }
    }

    public void desenhaTabuleiro(byte tab[][], Jogada jogada) {
        if (jogada == null) {
            desenhaTabuleiro(tab);
            return;
        }
        if (tabAnt == null) {
            tabAnt = tab;
            desenhaTabuleiroPrim(tab);
        } else {
            int li = jogada.getLinhaInicial();
            int ci = jogada.getColunaInicial();
            if (jogada.getLinhaInicial() != -1) {
                bts[li][ci].setBackground(Color.WHITE);
                if (tab[li][ci] >= 0) {
                    bts[li][ci].setIcon(icones[tab[li][ci]]);
                }
                espera();
            }
            int l = jogada.getLinha();
            int c = jogada.getColuna();
            bts[l][c].setBackground(Color.WHITE);
            bts[l][c].setIcon(icones[tab[l][c]]);
            espera();
            for (int i = 0; i < DIM; i++) {
                for (int j = 0; j < DIM; j++) {

                    if (tab[i][j] != tabAnt[i][j]) {
                        bts[i][j].setBackground(Color.WHITE);
                        if (tab[li][ci] >= 0) {
                            bts[i][j].setIcon(icones[tab[i][j]]);
                        }
                        espera();
                    }

                }
            }

            tabAnt = tab;
        }
        pack();
    }

    public void desenhaTabuleiro(byte tab[][]) {
        if (tabAnt == null) {
            tabAnt = tab;
            desenhaTabuleiroPrim(tab);
        } else {
            for (int i = 0; i < DIM; i++) {
                for (int j = 0; j < DIM; j++) {

                    //    if (tab[i][j] != tabAnt[i][j]) {
                    bts[i][j].setBackground(Color.WHITE);
                    bts[i][j].setIcon(null);
                    if (tab[i][j] >= 0) {
                        bts[i][j].setIcon(icones[tab[i][j]]);
                    }
                    espera();
                    //  }

                }
            }

            tabAnt = tab;
        }
        pack();
    }

    /**
     * exibe o tabuleiro com a configuracao atual
     *
     * @param tab array com as informacao sobre o tabuleiro
     */
    public void desenhaTabuleiroPrim(byte tab[][]) {

        for (int i = 0; i < DIM; i++) {
            for (int j = 0; j < DIM; j++) {
                if (tab[i][j] == -1) {
                    bts[i][j].setFont(new java.awt.Font("Dialog", 1, 18));
                    bts[i][j].setText("");
                    bts[i][j].setBackground(Color.WHITE);
                    bts[i][j].setIcon(null);
                }
            }
        }
        //      espera();

        for (int i = 0; i < DIM; i++) {
            for (int j = 0; j < DIM; j++) {

                if (tab[i][j] != -1) {
                    bts[i][j].setBackground(Color.WHITE);
                    bts[i][j].setIcon(icones[tab[i][j]]);
                }
            }
        }


    }

    public void notifica() {
        byte[][] tab = servidor.getTab();
        desenhaTabuleiro(tab);
    }

    /**
     * coloca zero no valor do timer
     */
    public void resetTimer() {
        t.reset();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelMensagem;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemReinicia;
    private javax.swing.JMenuItem jMenuItemSair;
    private javax.swing.JMenu jMenuTempo;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelBts;
    // End of variables declaration//GEN-END:variables

    /**
     * classe interna para contar o tempo.
     */
    class Timer extends Thread {

        private java.util.Date d;

        public void reset() {
            d = new java.util.Date();
        }

        public void run() {
            d = new java.util.Date();
            for (;;) {
                double dif = ((new java.util.Date()).getTime() - d.getTime()) / 1000;
                jMenuTempo.setText((int) (dif / 60) + ":" + ((int) dif) % 60);
                try {
                    Thread.sleep(1000);
                } catch (Exception e) {
                }
            }
        }
    }
}
